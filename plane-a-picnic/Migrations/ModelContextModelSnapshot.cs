// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using plane_a_picnic.Domain.Models;

namespace planeapicnic.Migrations
{
    [DbContext(typeof(ModelContext))]
    partial class ModelContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("plane_a_picnic.Domain.Models.AirportModel", b =>
                {
                    b.Property<int>("AirportId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Continent")
                        .IsRequired();

                    b.Property<double?>("ElevationFt");

                    b.Property<string>("GpsCode");

                    b.Property<string>("HomeLink");

                    b.Property<string>("IataCode");

                    b.Property<string>("Ident")
                        .IsRequired();

                    b.Property<string>("IsoCountry")
                        .IsRequired();

                    b.Property<string>("IsoRegion")
                        .IsRequired();

                    b.Property<string>("Keywords");

                    b.Property<double>("LatitudeDeg");

                    b.Property<string>("LocalCode");

                    b.Property<double>("LongitudeDeg");

                    b.Property<string>("Municipality");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("RegionId");

                    b.Property<bool>("ScheduledService");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.Property<string>("WikipediaLink");

                    b.HasKey("AirportId");

                    b.HasIndex("RegionId");

                    b.ToTable("Airports");
                });

            modelBuilder.Entity("plane_a_picnic.Domain.Models.CountryModel", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Continent")
                        .IsRequired();

                    b.Property<string>("Keywords");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("WikipediaLink")
                        .IsRequired();

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("plane_a_picnic.Domain.Models.RegionModel", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Continent");

                    b.Property<int>("CountryId");

                    b.Property<string>("IsoCountry")
                        .IsRequired();

                    b.Property<string>("Keywords");

                    b.Property<string>("LocalCode")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("WikipediaLink");

                    b.HasKey("RegionId");

                    b.HasIndex("CountryId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("plane_a_picnic.Domain.Models.RunwayModel", b =>
                {
                    b.Property<int>("RunwayId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AirportId");

                    b.Property<string>("AirportIdent")
                        .IsRequired();

                    b.Property<bool>("Closed");

                    b.Property<double?>("HeDisplacedThresholdFt");

                    b.Property<double?>("HeElevationFt");

                    b.Property<double?>("HeHeadingDegT");

                    b.Property<string>("HeIdent");

                    b.Property<double?>("HeLatitudeDeg");

                    b.Property<double?>("HeLongitudeDeg");

                    b.Property<double?>("LeDisplacedThresholdFt");

                    b.Property<double?>("LeElevationFt");

                    b.Property<double?>("LeHeadingDegT");

                    b.Property<string>("LeIdent");

                    b.Property<double?>("LeLatitudeDeg");

                    b.Property<double?>("LeLongitudeDeg");

                    b.Property<double?>("LengthFt");

                    b.Property<bool>("Lighted");

                    b.Property<string>("Surface");

                    b.Property<double?>("WidthFt");

                    b.HasKey("RunwayId");

                    b.HasIndex("AirportId");

                    b.ToTable("Runways");
                });

            modelBuilder.Entity("plane_a_picnic.Domain.Models.AirportModel", b =>
                {
                    b.HasOne("plane_a_picnic.Domain.Models.RegionModel", "Region")
                        .WithMany("Airports")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("plane_a_picnic.Domain.Models.RegionModel", b =>
                {
                    b.HasOne("plane_a_picnic.Domain.Models.CountryModel", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("plane_a_picnic.Domain.Models.RunwayModel", b =>
                {
                    b.HasOne("plane_a_picnic.Domain.Models.AirportModel", "Airport")
                        .WithMany("Runways")
                        .HasForeignKey("AirportId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
